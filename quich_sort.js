//Самая эффективная сортировка
//Быстрая сортировка или сортировка Хоара O(log2n*n)
//принцип работы: делим массив на подмассивы. Сначала из основного массива выбираем один опорный элемент,затем из этого массива те элементы,которые меньше выбранного добавляем в один массив,те элементы,которые больше выбранного-в другой массив.
//после этого то же самое делаем с полученными двумя массивами,это делается до тех пор пока длина массива не станет равна единице
//именно это условие будет базовым случаем выхода из рекурсии
//после всех этих операций отсортированные массивы склеиваются в один большой массив
const arr = [0, 3, 2, 5, 6, 8, 1, 9, 4, 2, 1, 2, 9, 6, 4, 1, 7, -1, -5, 23, 6, 2, 35, 6, 3, 32];
let count = 0;

function quickSort(array) {
//создадим случай когда рекурсия будет заканчиваться
    if(array.length <=1) {
        return array
    }
//находим опорный элемент,мы возьмем центральный
    let pivotIndex = Math.floor(array.length / 2);
    let pivot = array[pivotIndex]
//тут числа меньше чем опорный
    let less = []
//тут больше чем опорный
    let greater = []
//затем сравниваем каждый элемент с опорным в цикле:
    for( let i = 0; i < array.length; i++) {
        count +=1;
        if( i === pivotIndex)
//если равны,то операцию пропускаем с помощью ключевого слова continue
        continue
        if(array[i] < pivot) {
//если число меньше опорного,то добавляем его в less
            less.push(array[i])
        } else {
//в обратном случае число будет больше
            greater.push(array[i])
        }
    }
    return [...quickSort(less), pivot, ...quickSort(greater)]
}
console.log('count ', count);
console.log(quickSort(arr));